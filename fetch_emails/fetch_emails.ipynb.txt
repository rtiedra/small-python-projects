{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "8666c06c-3483-4a45-841d-577bef2602e8",
   "metadata": {},
   "source": [
    "Script for 'fetch_emails' program in Python<br>\n",
    "Licensed under the Apache License, Version 2.0<br>\n",
    "http://www.apache.org/licenses/LICENSE-2.0"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "b1ce0c3c-b56d-4642-a321-386b0a76c2a5",
   "metadata": {},
   "source": [
    "The program takes as input an URL and prints the list of emails addresses contained in it."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d28e99b7-f7e4-41a3-8602-3d1b214dea17",
   "metadata": {},
   "outputs": [],
   "source": [
    "import re\n",
    "import urllib.request"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "e8a5078a-d2ed-41f6-bfd3-fdabf4c96033",
   "metadata": {},
   "source": [
    "The function 'emails_list' takes as input an URL and returns the list of emails addresses contained in it:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "1292add9-58ff-47a1-8247-aafed8235371",
   "metadata": {},
   "outputs": [],
   "source": [
    "def emails_list(urlname):\n",
    "\n",
    "  # Opens urlname and store its content, in utf-8 format, in the string data\n",
    "  # Does so by passing a fake user agent to the website to avoid the possible error message:\n",
    "  # 'urllib.error.HTTPError: HTTP Error 403: Forbidden'\n",
    "  header = {'User-Agent': 'Chrome'}\n",
    "  url = urllib.request.Request(url=urlname, headers=header)\n",
    "  data = urllib.request.urlopen(url).read().decode('utf-8')\n",
    "\n",
    "  # Finds in data the email-type strings including '(at)' or '@' and not finishing by 'html'\n",
    "  # Discards possible repetitions with set() and orders the results with sorted()\n",
    "  emails1 = re.findall(r'[\\w.-]+\\(at\\)[\\w.-]+\\.(?!html)[a-zA-Z]+', data)\n",
    "  emails2 = re.findall(r'[\\w.-]+@[\\w.-]+\\.(?!html)[a-zA-Z]+', data)\n",
    "  emails = emails1 + emails2\n",
    "  return sorted(set(emails))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1de4801d-7ac8-4109-a411-879a500b5a11",
   "metadata": {},
   "source": [
    "The function 'main' takes as input an URL and returns the list of email addresses found in it:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "cebebf9d-219d-4d10-b379-a0672bb81fa1",
   "metadata": {},
   "outputs": [],
   "source": [
    "def main():\n",
    "  urlname = input(\"Enter URL where to look for email addresses: \")\n",
    "  emails = emails_list(urlname)\n",
    "  print('')\n",
    "  if emails:\n",
    "    print('The email addresses in', '\"' + urlname + '\"', 'are:\\n')\n",
    "    for email in emails:\n",
    "      print('-', email)\n",
    "  else:\n",
    "    print('No email address found in', '\"' + urlname + '\".')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "e4b4e2fb-eba8-4f1c-bca8-d26be3940b87",
   "metadata": {},
   "outputs": [
    {
     "name": "stdin",
     "output_type": "stream",
     "text": [
      "Enter URL where to look for email addresses:  https://en.wikipedia.org/wiki/Email_address\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "The email addresses in \"https://en.wikipedia.org/wiki/Email_address\" are:\n",
      "\n",
      "- JSmith@example.com\n",
      "- John..Doe@example.com\n",
      "- Pel√©@example.com\n",
      "- allowed@example.com\n",
      "- bar@example.com\n",
      "- c@example.com\n",
      "- example-indeed@strange-example.com\n",
      "- example.com@example.org\n",
      "- example@s.example\n",
      "- extension@pobox.com\n",
      "- foobar@example.com\n",
      "- fully-qualified-domain@example.com\n",
      "- i_like_underscore@but_its_not_allowed_in_this_part.example.com\n",
      "- joeuser@example.com\n",
      "- john.smith@example.com\n",
      "- john.smith@example.org\n",
      "- jsmith@example.com\n",
      "- l@example.com\n",
      "- other.email-with-hyphen@example.com\n",
      "- right@example.com\n",
      "- simple@example.com\n",
      "- sorting@example.com\n",
      "- symbol@example.com\n",
      "- tag@domain.com\n",
      "- tag@example.com\n",
      "- test@test.com\n",
      "- user-@example.org\n",
      "- user.name@example.com\n",
      "- user@example.com\n",
      "- username@example.org\n",
      "- very.common@example.com\n",
      "- x@example.com\n"
     ]
    }
   ],
   "source": [
    "if __name__ == '__main__':\n",
    "  main()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "d5078cf5-3d5c-40cc-aebc-a13ded4485b4",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.9.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
